#!/usr/bin/env python

import click
import os
import subprocess
import urllib.request
import tarfile
import logging
import shutil

from pathlib import Path

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


DDB_URL = "https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.tar.gz"
DDB_DOWNLOAD_PATH = '/tmp/dynamodb_local_latest.tar.gz'
DDB_LOCAL_PATH = '/tmp/ddbLocal'


@click.group()
def cli():
    pass


@cli.command()
def run():
    pass


def delete_build_dir_if_exists():
    build_dir = Path.cwd().joinpath("cdk.out")
    if build_dir.exists():
        shutil.rmtree(build_dir)


@cli.command()
@click.argument('flow')
def synth(flow):
    delete_build_dir_if_exists()
    process = subprocess.Popen(
        ["cdk", "synth", "-a", f"'python -m {flow}'"],
        cwd=os.getcwd()
    )
    process.wait()


def download_ddb_local():
    urllib.request.urlretrieve(DDB_URL, DDB_DOWNLOAD_PATH )
    tar = tarfile.open(DDB_DOWNLOAD_PATH)
    tar.extractall(path=DDB_LOCAL_PATH)
    tar.close()


@cli.command()
def start_ddb():
    process = subprocess.Popen(
        ["java",  f"-Djava.library.path={DDB_LOCAL_PATH }/DynamoDBLocal_lib",  "-jar", f"{DDB_LOCAL_PATH}/DynamoDBLocal.jar",  "-inMemory"]
    )
    process.wait()


@cli.command()
def setup_ddb_local():
    pass


@cli.command()
@click.argument('flow')
def deploy(flow):
    delete_build_dir_if_exists()
    process = subprocess.Popen(
        ["cdk", "deploy", "-a", f"'python -m {flow}'"],
        cwd=os.getcwd()
    )
    process.wait()


if __name__ == "__main__":
    cli()
