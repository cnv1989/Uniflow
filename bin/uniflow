#!/usr/bin/env python

import click
import os
import subprocess
import logging
import shutil
import json

from pathlib import Path
from uniflow.utils import get_flow_class_from_flow

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


@click.group()
def cli():
    pass


def create_cdk_contex():
    cdk_context = {
        "@aws-cdk/core:enableStackNameDuplicates": "true",
        "aws-cdk:enableDiffNoFail": "true"
    }
    cdk_context_json_path = Path.cwd().joinpath("cdk.context.json")
    with open(cdk_context_json_path, "w") as file:
        json.dump(cdk_context, file, indent=4)


def _generate_requirements():
    click.echo("START: Generating requirements for flow")
    requirements_path = Path.cwd().joinpath("requirements.txt")
    if not requirements_path.exists():
        requirements_path.touch()
    with open(requirements_path, "w") as req_file:
        process = subprocess.Popen(
            ["pipenv", "lock", "-r"],
            cwd=os.getcwd(),
            stdout=req_file
        )
        process.wait()
    click.echo("Finished: Generating requirements for flow")


@cli.command()
@click.argument('flow')
def build(flow):
    _clean()
    _generate_requirements()
    click.echo(f"START: Building flow {flow}")
    create_cdk_contex()
    flow_ob = get_flow_class_from_flow(flow)()
    flow_ob.build()
    click.echo(f"FINISHED: Building flow {flow}")


@cli.command()
def synth():
    click.echo("START: Synthesizing flow")
    process = subprocess.Popen(
        ["cdk", "synth", "-a", "cdk.out"],
        cwd=os.getcwd()
    )
    process.wait()
    click.echo("Finished: Synthesizing flow")


def _clean():
    click.echo("START: Cleaning build directory.")
    build_dir = Path.cwd().joinpath("cdk.out")
    if build_dir.exists():
        shutil.rmtree(build_dir)
    click.echo("FINISHED: Cleaning build directory.")


@cli.command()
def clean():
    _clean()


@cli.command()
def deploy():
    click.echo("START: Deploying flow.")
    process = subprocess.Popen(
        ["cdk", "deploy", "-a", "cdk.out"],
        cwd=os.getcwd()
    )
    process.wait()
    click.echo("FINISHED: Deploying flow.")


@cli.command()
@click.argument("flow", envvar='FLOW')
@click.option("--task", envvar='TASK')
@click.option("--flow-id", help="ID identifying the unique execution of the flow", envvar='FLOW_ID')
@click.option("--run-id", help="ID identifying the unique execution of the flow", envvar='RUN_ID')
@click.option("--local", is_flag=False)
def execute(flow, task, flow_id, run_id, local):
    if task and not run_id:
        click.echo("Missing run_id to execute a task.")
    elif not task and run_id:
        click.echo("Missing task to execute a particular run again.")
    else:
        flow_class = get_flow_class_from_flow(flow)
        task_manager = getattr(flow_class, task)(flow_id=flow_id, run_id=run_id, local=local)
        task_manager.execute_task()


@cli.command()
@click.argument("flow", envvar='FLOW')
def start(flow):
    from uniflow.client.api_client import ApiClient
    _, stack_name = flow.rsplit(".", 1)
    client = ApiClient(stack_name)
    client.start_flow()


if __name__ == "__main__":
    cli()
