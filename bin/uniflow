#!/usr/bin/env python

import click
import os
import subprocess
import urllib.request
import tarfile
import logging
import shutil
import json
import importlib

from pathlib import Path

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


DDB_URL = "https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.tar.gz"
DDB_DOWNLOAD_PATH = '/tmp/dynamodb_local_latest.tar.gz'
DDB_LOCAL_PATH = '/tmp/ddbLocal'


@click.group()
def cli():
    pass


def create_cdk_contex():
    cdk_context = {
        "@aws-cdk/core:enableStackNameDuplicates": "true",
        "aws-cdk:enableDiffNoFail": "true"
    }
    cdk_context_json_path = Path.cwd().joinpath("cdk.context.json")
    with open(cdk_context_json_path, "w") as file:
        json.dump(cdk_context, file, indent=4)


def _generate_requirements():
    click.echo("START: Generating requirements for flow")
    requirements_path = Path.cwd().joinpath("requirements.txt")
    if not requirements_path.exists():
        requirements_path.touch()
    with open(requirements_path, "w") as req_file:
        process = subprocess.Popen(
            ["pipenv", "lock", "-r"],
            cwd=os.getcwd(),
            stdout=req_file
        )
        process.wait()
    click.echo("Finished: Generating requirements for flow")


@cli.command()
@click.argument('flow')
def build(flow):
    _clean()
    _generate_requirements()
    click.echo(f"START: Building flow {flow}")
    create_cdk_contex()
    module_name, class_name = flow.rsplit(".", 1)
    flow_module = importlib.import_module(module_name)
    flow_class = getattr(flow_module, class_name)
    flow_ob = flow_class()
    flow_ob.build()
    click.echo(f"FINISHED: Building flow {flow}")


@cli.command()
def synth():
    click.echo("START: Synthesizing flow")
    process = subprocess.Popen(
        ["cdk", "synth", "-a", "cdk.out"],
        cwd=os.getcwd()
    )
    process.wait()
    click.echo("Finished: Synthesizing flow")


def _clean():
    click.echo("START: Cleaning build directory.")
    build_dir = Path.cwd().joinpath("cdk.out")
    if build_dir.exists():
        shutil.rmtree(build_dir)
    click.echo("FINISHED: Cleaning build directory.")


@cli.command()
def clean():
    _clean()


@cli.command()
def deploy():
    click.echo("START: Deploying flow.")
    process = subprocess.Popen(
        ["cdk", "deploy", "-a", "cdk.out"],
        cwd=os.getcwd()
    )
    process.wait()
    click.echo("FINISHED: Deploying flow.")


def download_ddb_local():
    urllib.request.urlretrieve(DDB_URL, DDB_DOWNLOAD_PATH )
    tar = tarfile.open(DDB_DOWNLOAD_PATH)
    tar.extractall(path=DDB_LOCAL_PATH)
    tar.close()


@cli.command()
def start_ddb():
    process = subprocess.Popen(
        ["java",  f"-Djava.library.path={DDB_LOCAL_PATH }/DynamoDBLocal_lib",  "-jar", f"{DDB_LOCAL_PATH}/DynamoDBLocal.jar",  "-inMemory"]
    )
    process.wait()


@cli.command()
def build_docker():
    from uniflow.docker.batch_container_image import BatchContainerImage
    tib = BatchContainerImage()
    tib.build()


if __name__ == "__main__":
    cli()
